
/*
 * In order to use ml-gradle, it must be applied. This occurs after the two above blocks for overriding properties so
 * that those blocks can override properties before ml-gradle initializes itself.
 */
plugins {
  id "com.marklogic.ml-gradle" version "2.9.0"

  // The following plugins are optional

  // The Java plugin is used to compile and run JUnit tests
  id "java"

  // These plugins are used to generate IDE files
  id "eclipse"
  id "idea"
}


/*
 * Everything below this line is optional and is intended to show different features provided by ml-gradle.
 */

/*
 * This lists the repositories for finding project dependencies (which differ from buildscript dependencies - buildscript
 * dependencies are not included in project artifacts that are built). These repositories are needed to satisfy the
 * dependencies expressed below.
 */
repositories {
  jcenter()

  // Needed for mlcp dependencies
  maven { url "https://developer.marklogic.com/maven2/" }
}


configurations {
  // This configuration captures the dependencies for running mlcp (Content Pump). This is only needed if you want
  // to run mlcp via Gradle tasks. If you do, using com.marklogic.gradle.task.MlcpTask is a useful starting point, as
  // shown below.  Need to force to use certain version of xml-apis library.
  mlcp {
    resolutionStrategy {
      force "xml-apis:xml-apis:1.4.01"
    }
  }
}


/*
 * This expresses dependencies on the ml-java and ml-junit libraries. The former is typically used for application
 * code, and the latter supports writing JUnit-based tests. A dependency exists on RestAssured to show an option for
 * using that library in tests that must invoke MarkLogic HTTP endpoints.
 */
dependencies {
  compile group: 'com.marklogic', name: 'marklogic-client-api', version: '4.0.1'
  compile group: 'org.springframework', name: 'spring-core', version: '4.3.10.RELEASE'
  //mlcp
  compile group: 'com.marklogic', name: 'mlcp', version: '9.0.2'
  mlcp "com.marklogic:mlcp:9.0.2"
  mlcp "org.apache.commons:commons-csv:1.2"
  mlcp files("lib")
  // Needed to compile and run the JUnit tests
  testCompile "com.jayway.restassured:rest-assured:2.4.1"
  testCompile 'junit:junit:4.12'

  compile mlAppDeployerDependency
  compile mlcpUtilDependency
}


/**
 * Example of using MlcpTask to import data with mlcp.
 */
task importSampleData(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"
  database = mlAppConfig.contentDatabaseName
  input_file_path = "data"
  output_collections = "sample-import"
  output_permissions = "rest-reader,read,rest-writer,update"
  output_uri_replace = ".*data,'/data'"

  transform_module = "/ext/sample-project/mlcp/transaction.xqy"
  transform_namespace = "http://marklogic.com/rest-api/transform/transaction"
  transform_function = "transform"
  port = mlAppConfig.restPort
  username = mlAdminConfig.getUsername()
  password = mlAdminConfig.getPassword()
  /**
   * New in ml-gradle 2.6.0 - set this to define a URI in your content database for mlcp's log output to be written to
   * as a text document. This can also be a variable, Gradle property, etc.
   */
  logOutputUri = "/logs.txt"
}




/*
 * For tests that reference test files in the test source tree, we need to tell Gradle to copy these to src/test/resources
 * so that they can be found when running "gradle test".
 */
sourceSets.test.resources.srcDir 'src/test/java'




